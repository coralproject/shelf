// Code generated by go-bindata.
// sources:
// sets/comments_by_asset.json
// sets/comments_by_user_id.json
// sets/top_commenters_by_count.json
// DO NOT EDIT!

package queries

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _setsComments_by_assetJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x50\xcd\x6a\xc3\x30\x0c\xbe\xe7\x29\x44\xb6\xe3\xd8\x03\xf4\xbc\xcb\xae\xbb\x8e\x12\x14\x47\xdd\x04\xb6\xe3\x59\x0a\x34\x94\xbe\xfb\x6c\xf5\x27\x66\x83\x5e\x8c\xf5\xfd\x48\x1f\xdf\xa9\x03\xe8\x23\x06\xea\x77\xd0\xbb\x39\x04\x8a\x2a\xc3\xb8\x0e\x28\x42\xda\xbf\x54\x7a\x22\x71\x95\xfe\x20\x5d\x72\x14\x40\xf0\x2c\x0a\xf3\x01\x6e\x06\x18\x57\x68\x0c\x29\xd3\x20\x2e\x73\xd2\x6a\xbb\x62\xa2\xff\x31\xcc\x18\xa4\xcc\x9f\x7b\x9b\x7f\x16\xca\x4c\x06\x94\x11\xe0\x64\xef\xa3\x80\x03\x4f\xb6\xca\x54\xba\x26\x53\x25\x4e\xe4\x39\xd2\xc6\xb8\xd9\x7b\x72\xca\x73\xac\x3c\x2b\x95\xab\x0d\x19\x02\xc6\x69\x3b\xdb\x9e\x36\xc5\x73\x40\x75\xdf\x85\x6f\xd1\x5a\x0c\x2a\xbe\x5a\x8e\xf7\xb7\xba\xf8\x49\x34\x73\xfc\xda\xdd\xa3\x35\xf2\x73\xf7\xf7\xb7\xbf\x27\xe0\x38\xd1\x91\xb6\x22\x0c\xcc\xd6\x76\xc1\x34\x2f\xd4\xdd\x8c\x97\xa2\x28\xe2\xe8\x69\xba\x92\x17\xe8\x98\x3c\x72\xd5\x1f\xd0\x0b\x75\xe7\xee\x37\x00\x00\xff\xff\x0e\x27\xbd\x2b\xdb\x01\x00\x00")

func setsComments_by_assetJsonBytes() ([]byte, error) {
	return bindataRead(
		_setsComments_by_assetJson,
		"sets/comments_by_asset.json",
	)
}

func setsComments_by_assetJson() (*asset, error) {
	bytes, err := setsComments_by_assetJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sets/comments_by_asset.json", size: 475, mode: os.FileMode(420), modTime: time.Unix(1474569862, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _setsComments_by_user_idJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\x41\x4f\xc3\x30\x0c\x85\xef\xfd\x15\x56\xe1\x38\x10\x70\xdc\x99\x0b\x57\xae\x68\xaa\xbc\xd4\x03\x8b\x24\x0d\xb1\x2b\xad\x9a\xfa\xdf\x49\xb2\x76\xad\x34\x01\xe2\x52\xc5\xef\x7d\xf6\xb3\x92\x9e\x2a\x80\xda\xa3\xa3\x7a\x0b\xb5\xe9\x9c\x23\xaf\xd2\xec\x87\xa6\x17\x8a\xf5\x26\xbb\x2d\x89\xc9\xee\x2b\x69\x1f\xbd\x00\x82\x65\x51\xe8\x0e\x30\xf3\xb0\x1f\x60\xe1\x43\xa4\x46\x4c\xe4\xa0\xb9\x6b\xd2\x44\xaf\x35\x8c\xe8\x24\xd5\x6f\xbb\x52\x7f\xf5\x14\x99\x8a\x90\x4a\x80\x53\xf9\xfe\xb2\x5e\xc3\x6d\x99\x54\x20\x1d\x42\x81\x02\x07\xb2\xec\x69\x71\x4c\x67\x2d\x19\xe5\xce\x67\x9f\x95\x52\xe8\xca\x74\x0e\x7d\xbb\xa4\xae\x93\x0b\x71\xeb\x50\xcd\x47\xf2\xd7\x6a\xbe\x16\x54\xbc\xcf\x6b\xbc\x3c\xe7\xb9\x37\xa2\x91\xfd\xfb\x76\x5e\x6c\x05\x8f\x97\xf3\xb8\xf9\x21\x43\xba\xa8\xd7\x11\xa2\xa8\x7d\x5e\xed\xee\xf1\x9f\xe3\x3e\x39\xa4\xb6\x87\xbf\x49\xcb\x8e\x73\xf2\xd3\x8a\x9d\x4e\xbb\xcb\x25\xb1\x6f\xe9\x48\xcb\x53\x15\x31\x96\xdf\x21\x69\x1a\x7b\xaa\xe6\xc6\xf3\x53\x92\xc7\xbd\xa5\x76\x32\xcf\xd2\x31\x58\xe4\xcc\x1f\xd0\x0a\x55\x63\xf5\x1d\x00\x00\xff\xff\xa5\x75\xf3\x9b\x7b\x02\x00\x00")

func setsComments_by_user_idJsonBytes() ([]byte, error) {
	return bindataRead(
		_setsComments_by_user_idJson,
		"sets/comments_by_user_id.json",
	)
}

func setsComments_by_user_idJson() (*asset, error) {
	bytes, err := setsComments_by_user_idJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sets/comments_by_user_id.json", size: 635, mode: os.FileMode(420), modTime: time.Unix(1474569442, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _setsTop_commenters_by_countJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\x3f\x4f\xc3\x30\x10\xc5\xf7\x7e\x8a\x93\xe9\x18\x10\x65\xcc\xcc\xc2\xcc\x88\xaa\x28\x7f\x8e\xd6\x52\x7c\x36\x77\x67\xa1\xa8\xca\x77\xc7\x4e\x0c\x4d\x05\x03\xc9\x90\x77\xef\x7e\x2f\x79\x8a\x2f\x3b\x00\x30\xd4\x3a\x34\xb5\x51\x1f\x9a\xde\x3b\x87\xa4\xc8\xd2\x74\x53\x9a\x22\xa9\xa9\x16\x68\x40\xe9\x13\xf4\x7a\xf6\x9f\x02\x7a\x46\x48\x38\x3c\x3d\xc2\x35\x01\xdd\x04\x14\x5d\x87\x0c\xfe\xfd\xdb\x97\x12\x47\x6a\xbb\x11\x07\x53\x2b\x47\x5c\xad\x8f\x88\x6c\x51\x4c\xfd\x96\xc7\x74\x5d\xca\xf3\xbf\x9d\x0a\xaa\x53\xc8\x68\xb0\x01\x47\x4b\x78\xb3\xeb\xfd\x38\x62\xaf\xd6\x53\x22\xac\xa2\x93\x9b\x35\xa3\x46\xa6\x4d\xa9\x9f\x98\x73\x2d\x0d\x9b\x6e\xa5\x21\x98\xfd\x89\x7d\x0c\xa6\xce\xba\xb1\xc3\x2a\x86\x56\xdb\x87\x28\xc8\x2f\xcf\xc9\x30\x77\xa2\x6c\xe9\x54\x67\x27\x33\x30\x57\xeb\x3b\x97\x1f\xb2\x24\xf6\x12\x5d\x52\x07\x98\xf3\x5d\xfd\xfa\x8a\x78\xd6\x95\xdc\xe4\xee\x0f\x7f\xc3\xa3\x75\x36\xd3\xe9\x38\xe6\xeb\xf2\x58\xe4\x62\x1d\x77\xf3\xee\x2b\x00\x00\xff\xff\x2d\xac\xd5\x9c\xee\x01\x00\x00")

func setsTop_commenters_by_countJsonBytes() ([]byte, error) {
	return bindataRead(
		_setsTop_commenters_by_countJson,
		"sets/top_commenters_by_count.json",
	)
}

func setsTop_commenters_by_countJson() (*asset, error) {
	bytes, err := setsTop_commenters_by_countJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sets/top_commenters_by_count.json", size: 494, mode: os.FileMode(420), modTime: time.Unix(1474569508, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sets/comments_by_asset.json": setsComments_by_assetJson,
	"sets/comments_by_user_id.json": setsComments_by_user_idJson,
	"sets/top_commenters_by_count.json": setsTop_commenters_by_countJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sets": &bintree{nil, map[string]*bintree{
		"comments_by_asset.json": &bintree{setsComments_by_assetJson, map[string]*bintree{}},
		"comments_by_user_id.json": &bintree{setsComments_by_user_idJson, map[string]*bintree{}},
		"top_commenters_by_count.json": &bintree{setsTop_commenters_by_countJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

