// Code generated by go-bindata.
// sources:
// sets/comments.json
// DO NOT EDIT!

package queries

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _setsCommentsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\xcf\x6a\xc4\x20\x10\xc6\xef\x79\x8a\x41\x72\x4c\xa1\xdb\x63\x5e\xa3\xc7\xb2\x84\xfc\x99\x76\x05\x1d\xed\x38\x52\xc2\x92\x77\xaf\x26\x6e\x93\xd0\x1e\xaa\x07\xbf\x99\xf9\x7d\xfa\x81\xf7\x0a\x00\x14\xf5\x16\x55\xab\xc4\xf9\x6e\x74\xd6\x22\x09\x72\xe8\x86\x39\x55\x91\x44\x35\x2b\x34\x61\x18\x13\xf4\x7a\x73\x5f\x01\xe4\x86\x90\x70\x78\x79\x86\xdd\x01\xc3\x0c\x14\xed\x80\x0c\xee\xfd\xd1\x0f\xc5\x8e\xd4\x0f\x06\x27\xd5\x0a\x47\xdc\x5a\x9f\x11\x59\x63\x50\xed\x5b\x2e\xd3\xba\x97\xf3\xbf\x99\x0a\x2a\xb3\xcf\xa8\xd7\x1e\x8d\x26\x3c\xcd\x46\x67\x0c\x8e\xa2\x1d\x25\xe2\x1c\xa9\x10\x8c\x12\x99\x0e\xb9\x7e\x9c\xd6\xf6\x34\x1d\xe2\x95\x90\xa0\xea\x0f\x76\xd1\xab\x36\xeb\x4e\x4f\x9b\x88\x01\x79\x2b\x54\xfd\xd0\xb0\x34\xb0\xbf\xba\x62\x75\x88\x36\xa9\x0b\x2c\x79\x37\xbf\xae\x0e\x8e\x65\x23\x0f\xbe\xa7\xcb\xdf\xb0\xd1\x56\x67\x3a\x7d\xc3\xb2\x0f\xaf\x45\xae\xad\x6b\xb5\x54\xdf\x01\x00\x00\xff\xff\x4e\x3f\x24\x40\xe6\x01\x00\x00")

func setsCommentsJsonBytes() ([]byte, error) {
	return bindataRead(
		_setsCommentsJson,
		"sets/comments.json",
	)
}

func setsCommentsJson() (*asset, error) {
	bytes, err := setsCommentsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sets/comments.json", size: 486, mode: os.FileMode(420), modTime: time.Unix(1474325955, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sets/comments.json": setsCommentsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sets": &bintree{nil, map[string]*bintree{
		"comments.json": &bintree{setsCommentsJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

